"""
Django settings for ApniRide project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
import os

MEDIA_URL = '/documents/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'documents')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jy3x&@mfb7!bdg77%6gxl1iau2pe96euv!+%y42aet0kq1_7dp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:2000",
    "http://localhost:4200",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:4200",
    "http://127.0.0.1:4200",
]
# Application definition
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'WARNING',  # Only warnings/errors to console
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
            'level': 'DEBUG',  # Everything DEBUG+ goes to file
        },
    },
    'loggers': {
        # Root logger
        '': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',  # Capture all logs for file
            'propagate': False,  # Prevent double printing to console
        },
        # APScheduler logs
        'apscheduler': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apscheduler.scheduler': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django Channels logs
        'channels': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Daphne ASGI server logs
        'daphne': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django request logs (HTTP POST/GET info)
        'django.server': {
            'handlers': ['console'],  # Only warnings/errors to console
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

INSTALLED_APPS = [
    "daphne",      
    "channels",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_apscheduler',
    'rest_framework_simplejwt.token_blacklist',
]
ASGI_APPLICATION = "ApniRide.asgi.application"

# use only in production

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# use in development only 

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer',
#     },
# }

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ApniRide.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ApniRide.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'apniride',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'HOST': '127.0.0.1',
        'PORT': '3306', 
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

SIMPLE_JWT = {
     'ACCESS_TOKEN_LIFETIME': timedelta(days=365*100),
     'REFRESH_TOKEN_LIFETIME': timedelta(days=365*100),
     'ROTATE_REFRESH_TOKENS': True,  
     'BLACKLIST_AFTER_ROTATION': True  
}
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

from celery.schedules import crontab

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_BEAT_SCHEDULE = {
    'reset-earned-every-day-midnight': {
        'task': 'your_app.tasks.reset_earned_field',
        'schedule': crontab(hour=0, minute=0),  # 12:00 AM daily
    },
}


# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
RAZORPAY_KEY_ID="rzp_test_jMpRm1HDX5ZT4x"
RAZORPAY_KEY_SECRET="PERAVYmOCKh4ZygDuRzEJWzi"

AUTH_USER_MODEL = 'api.User'


GOOGLE_MAPS_API_KEY = None
SMS_API_KEY = None
PAYMENT_API = None

from django.utils.functional import SimpleLazyObject
from ApniRide.utils import getApiKey


API_KEYS = SimpleLazyObject(getApiKey)

GOOGLE_MAPS_API_KEY = lambda: API_KEYS["maps_api_key"]
SMS_API_KEY = lambda: API_KEYS["sms_api_key"]
PAYMENT_API = lambda: API_KEYS["payment_api_key"]
# FIREBASE_SERVICE_ACCOUNT_PATH = "E:/Cab/Cab-New/ApniRide-Backend/firebase_service_account.json"

FIREBASE_SERVICE_ACCOUNT_PATH = os.getenv("FIREBASE_SERVICE_ACCOUNT_PATH",os.path.join(BASE_DIR, "firebase_service_account.json"))



import ApniRide.firebase_app